{"version":3,"sources":["./src/app/app-utils/app-comparators.ts","./src/app/modules/app-rolls/components/roll-check/roll-check.component.css","./src/app/modules/app-rolls/components/roll-check/roll-check.component.html","./src/app/modules/app-rolls/components/roll-check/roll-check.component.ts","./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.css","./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.html","./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.ts","./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.css","./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.html","./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.ts","./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.css","./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.html","./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.ts","./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.css","./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.html","./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.ts","./src/app/modules/app-rolls/enums/check-status.enum.ts","./src/app/modules/app-rolls/enums/roll-operation-type.enum.ts","./src/app/modules/app-rolls/rolls-routing.module.ts","./src/app/modules/app-rolls/rolls.module.ts","./src/app/modules/app-rolls/services/rolls-url.service.ts","./src/app/modules/app-rolls/services/rolls.service.ts"],"names":[],"mappings":"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","file":"rolls.module.chunk.js","sourcesContent":["import * as moment from 'moment';\n\n/**\n * @returns numeric value of the resulting comparation\n * @description compares two hexademical color codes in format #ff11aa\n *  \n * @param c1 color code only in hexademical format of the first element\n * @param c2 color code only in hexademical format of the second element\n */\nexport function compareColors(c1: string, c2: string): number {\n  const a1 = c1.substr(1, c1.length);\n  const a2 = c2.substr(1, c2.length);\n  const base = 16;\n  const r1 = parseInt(a1.substr(0, 2), base);\n  const g1 = parseInt(a1.substr(2, 2), base);\n  const b1 = parseInt(a1.substr(4, 2), base);\n  const r2 = parseInt(a2.substr(0, 2), base);\n  const g2 = parseInt(a2.substr(2, 2), base);\n  const b2 = parseInt(a2.substr(4, 2), base);\n  const hsl1 = rgbToHsl(r1, g1, b1);\n  const hsl2 = rgbToHsl(r2, g2, b2);\n  let result = hsl1[0] - hsl2[0];\n  if (result != 0) {\n    return result;\n  } else if ((result = hsl1[1] - hsl2[1]) != 0) {\n    return result;\n  } else {\n    result = hsl1[2] - hsl2[2];\n  }\n  return result;\n}\n\n/**\n * @returns color code in hsl format as array of numbers [hue, saturation, lightness]\n * @description transforms rgb color code to hsl\n * \n * @param r red color value between 0 and 255\n * @param g green color value between 0 and 255\n * @param b blue color value between 0 and 255\n */\nexport function rgbToHsl(r: number, g: number, b: number): number[] {\n  r /= 255, g /= 255, b /= 255;\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h, s, l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0;\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [(h * 100 + 0.5) | 0, ((s * 100 + 0.5) | 0), ((l * 100 + 0.5) | 0)];\n}\n\nexport function compareDates(d1: string, d2: string, format: string = 'DD-MM-YYYY') {\n  const m1 = moment(d1, format);\n  const m2 = moment(d2, format);\n  const result = m1.diff(m2, 'days');\n  return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-utils/app-comparators.ts","module.exports = \"::ng-deep .ng-value-container, ng-arrow-wrapper {            \\n    padding: 0px !important;\\n    margin: 0px !important;    \\n}\\n\\n::ng-deep .ng-select .ng-select-container {\\n    width: -webkit-fit-content !important;\\n    width: -moz-fit-content !important;\\n    width: fit-content !important;\\n    height: -webkit-fit-content !important;\\n    height: -moz-fit-content !important;\\n    height: fit-content !important;\\n    min-height: 0px;\\n}\\n\\n::ng-deep .ng-dropdown-panel .ng-dropdown-panel-items .ng-option {\\n    padding: 0;\\n    text-align: left;\\n}\\n\\n::ng-deep .ng-dropdown-panel .ng-dropdown-panel-items .ng-option.ng-option-selected,\\n::ng-deep .ng-dropdown-panel .ng-dropdown-panel-items .ng-option:hover {\\n    background-color: rgb(220, 239, 255);\\n}\\n\\n::ng-deep .ng-dropdown-panel {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-check/roll-check.component.css\n// module id = ./src/app/modules/app-rolls/components/roll-check/roll-check.component.css\n// module chunks = rolls.module","module.exports = \"<ng-select [(ngModel)]=\\\"selectedModel\\\" [items]=\\\"items\\\" [searchable]=\\\"false\\\" [clearable]=\\\"false\\\" bindLabel=\\\"label\\\"\\n  appendTo=\\\"ng-select\\\" (change)=\\\"changeRollCheck($event)\\\">\\n  <ng-template ng-label-tmp let-item=\\\"item\\\">\\n    <span class=\\\"material-icons\\\" [ngClass]=\\\"item.clazz\\\">{{ item.label }}</span>\\n  </ng-template>\\n  <ng-template ng-option-tmp let-item=\\\"item\\\" let-index=\\\"index\\\" let-search=\\\"searchTerm\\\">\\n    <b class=\\\"material-icons\\\" [ngClass]=\\\"item.clazz\\\" [ngOptionHighlight]=\\\"search\\\">{{item.label}}</b>\\n  </ng-template>\\n</ng-select>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-check/roll-check.component.html\n// module id = ./src/app/modules/app-rolls/components/roll-check/roll-check.component.html\n// module chunks = rolls.module","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport {\n  CheckStatus\n} from '../../enums/check-status.enum';\n\n@Component({\n  selector: 'app-roll-check',\n  templateUrl: './roll-check.component.html',\n  styleUrls: ['./roll-check.component.css']\n})\nexport class RollCheckComponent implements OnInit {\n\n  @Input() rollCheck: RollCheck;\n  @Output() changeCheckStatus = new EventEmitter < RollCheck > ();\n  selectedModel: AppSelect;\n  items: AppSelect[] = [{\n      label: 'check_box_outline_blank',\n      value: 'NOT_CHECKED',\n      clazz: 'text-secondary'\n    },\n    {\n      label: 'check_box',\n      value: 'CONFIRMED',\n      clazz: 'text-success'\n    },\n    {\n      label: 'indeterminate_check_box',\n      value: 'NOT_CONFIRMED',\n      clazz: 'text-danger'\n    }\n  ]\n\n  constructor() {}\n\n  ngOnInit() {\n    this.selectedModel = this.items\n      .find((value, index, array) => value.value === this.rollCheck.rollLeftOverCheckStatus);\n  }\n\n  changeRollCheck(model: AppSelect) {\n    let result = < RollCheck > {};\n    Object.assign(result, this.rollCheck);\n    result.rollLeftOverCheckStatus = CheckStatus[model.value];\n    this.changeCheckStatus.emit(result);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/components/roll-check/roll-check.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.css\n// module id = ./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.css\n// module chunks = rolls.module","module.exports = \"<div *ngIf=\\\"batch\\\">\\n  <h6>\\n    Текущий остаток: {{ batch.leftOverAmount }}\\n  </h6>\\n  <hr>\\n</div>\\n<form [formGroup]=\\\"form\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"operation-type\\\">Тип операции:</label>\\n    <select class=\\\"form-control\\\" id=\\\"operation-type\\\" formControlName=\\\"operationType\\\" (change)=\\\"revalidateAmount()\\\">\\n      <option value=\\\"MANUFACTURE\\\" selected>Производство</option>\\n      <option value=\\\"USE\\\">Списание</option>\\n    </select>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"roll-amount\\\">Количество рулонов:</label>\\n    <input type=\\\"number\\\" min=\\\"0\\\" step=\\\"1\\\" class=\\\"form-control\\\" id=\\\"roll-amount\\\" formControlName=\\\"rollAmount\\\" [ngClass]=\\\"{\\n        'is-invalid': form.get('rollAmount').invalid && isTouched('rollAmount'),\\n        'is-valid': form.get('rollAmount').valid && isTouched('rollAmount')\\n      }\\\">\\n    <div class=\\\"invalid-feedback\\\" *ngIf=\\\"form.get('rollAmount').invalid && isTouched('rollAmount')\\\">\\n      <span *ngIf=\\\"form.get('rollAmount').errors['required']\\\">\\n        Количество рулонов не может быть пустым!\\n      </span>\\n      <span *ngIf=\\\"form.get('rollAmount').errors['min']\\\">\\n        Минимальное количество рулонов для операции: {{ MIN_ROLL_AMOUNT }}\\n      </span>\\n      <span *ngIf=\\\"form.get('rollAmount').errors['greaterThanLeftError']\\\">\\n        При использовании количество рулонов не может быть больше чем текущий остаток: {{ batch.leftOverAmount }}\\n      </span>\\n      <span *ngIf=\\\"form.get('rollAmount').errors['notIntegerError']\\\">\\n        Количество рулонов должно быть целым числом!\\n      </span>\\n    </div>\\n  </div>\\n</form>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.html\n// module id = ./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.html\n// module chunks = rolls.module","import {\n  Component,\n  OnInit,\n  ComponentRef\n} from '@angular/core';\nimport {\n  NgbActiveModal\n} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  IModalDialog,\n  IModalDialogOptions,\n  IModalDialogButton\n} from 'ngx-modal-dialog';\nimport {\n  FormGroup,\n  FormControl,\n  Validators\n} from '@angular/forms';\n\nimport {\n  RollOperationType\n} from '../../enums/roll-operation-type.enum';\nimport {\n  integerValidator\n} from '../../../../app-utils/app-validators';\nimport {\n  midnightDate,\n  formatDate\n} from '../../../../app-utils/app-date-utils';\n\n\n@Component({\n  selector: 'app-roll-operation-modal',\n  templateUrl: './roll-operation-modal.component.html',\n  styleUrls: ['./roll-operation-modal.component.css']\n})\nexport class RollOperationModalComponent implements OnInit, IModalDialog {\n\n  actionButtons: IModalDialogButton[];\n  options: Partial < IModalDialogOptions < RollOperationModalData >> ;\n  batch: RollBatch;\n  rollTypeId: number;\n  manufacturedDate: Date;\n\n  form: FormGroup;\n  operationType = RollOperationType.MANUFACTURE;\n\n  readonly MIN_ROLL_AMOUNT = 1;\n  \n  private btnClass = 'btn btn-outline-dark';\n  submitPressed = false;\n\n  constructor() {\n    this.actionButtons = [{\n        text: 'Отмена',\n        buttonClass: this.btnClass,\n        onAction: () => true\n      },\n      {\n        text: 'Произвести операцию',\n        buttonClass: this.btnClass,\n        onAction: this.onSubmit.bind(this)\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      operationType: new FormControl({\n        value: this.operationType,\n        disabled: !this.batch\n      }),\n      rollAmount: new FormControl(undefined, [Validators.required, Validators.min(this.MIN_ROLL_AMOUNT), this.validateAmount.bind(this), integerValidator])\n    });\n  }\n\n  dialogInit(reference: ComponentRef < IModalDialog > , options: Partial < IModalDialogOptions < RollOperationModalData >> ) {\n    this.options = options;\n    this.batch = options.data.batch;\n    this.rollTypeId = options.data.rollTypeId;\n    this.manufacturedDate = options.data.manufacturedDate;\n  }\n\n  onSubmit(): Promise < RollOperation > {\n    if (this.form.invalid) {\n      this.submitPressed = true;\n      const reject = Promise.reject('invalid');\n      this.options.data.operation(reject);\n      return reject;\n    }\n\n    const rollOperation: RollOperation = {\n      operationDate: formatDate(midnightDate()),\n      operationType: this.form.get('operationType').value,\n      manufacturedDate: formatDate(this.manufacturedDate),\n      rollTypeId: this.rollTypeId,\n      rollAmount: this.form.get('rollAmount').value\n    }\n    const resolve = Promise.resolve(rollOperation);\n    this.options.data.operation(resolve);\n    return resolve;\n  }\n\n  validateAmount(control: FormControl) {\n    if (this.batch && control.value > this.batch.leftOverAmount) {\n      if (this.form.value.operationType == RollOperationType.USE) {\n        return {\n          'greaterThanLeftError': true\n        };\n      }\n    }\n    return null;\n  }\n\n  revalidateAmount() {\n    this.form.get('rollAmount').updateValueAndValidity();\n  }\n\n  isTouched(controlName: string) {\n    return this.form.get(controlName).touched || this.submitPressed;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/components/roll-operation-modal/roll-operation-modal.component.ts","module.exports = \"\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.css\n// module id = ./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.css\n// module chunks = rolls.module","module.exports = \"<div class=\\\"container-fluid mt-2\\\">\\n  <form [formGroup]=\\\"form\\\">\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"col-md-3 offset-md-3 pl-2 pr-2 pt-1 pb-1 pt-md-0 pb-md-0\\\">\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <div class=\\\"input-group-text\\\">от</div>\\n          </div>\\n          <input type=\\\"date\\\" class=\\\"form-control\\\" id=\\\"fromDate\\\" formControlName=\\\"fromDate\\\" [ngClass]=\\\"{\\n            'is-invalid': form.get('fromDate').invalid,\\n            'is-valid': form.get('fromDate').valid && form.get('fromDate').touched\\n          }\\\">\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"form.get('fromDate').invalid\\\">\\n            <span *ngIf=\\\"form.get('fromDate').errors['required']\\\">Не может быть пустым!</span>\\n            <span *ngIf=\\\"form.get('fromDate').errors['biggerThenToDate']\\\">Дата начала должна быть меньше даты конца!</span>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-3 pl-2 pr-2 pt-1 pb-1 pt-md-0 pb-md-0\\\">\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <div class=\\\"input-group-text\\\">до</div>\\n          </div>\\n          <input type=\\\"date\\\" class=\\\"form-control\\\" id=\\\"toDate\\\" formControlName=\\\"toDate\\\" [ngClass]=\\\"{\\n            'is-invalid': form.get('toDate').invalid,\\n            'is-valid': form.get('toDate').valid && form.get('toDate').touched\\n          }\\\">\\n          <div class=\\\"invalid-feedback\\\" *ngIf=\\\"form.get('toDate').invalid\\\">\\n            <span *ngIf=\\\"form.get('toDate').errors['required']\\\">Не может быть пустым!</span>\\n            <span *ngIf=\\\"form.get('toDate').errors['smallerThenFromDate']\\\">Дата конца должна быть больше даты начала!</span>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"col-md-1 pl-2 pr-2 pt-1 pb-1 pt-md-0 pb-md-0\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-outline-dark\\\" [disabled]=\\\"form.invalid\\\" (click)=\\\"onSubmit()\\\">Показать</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n<div class=\\\"container-fluid mt-2\\\">\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\" *ngIf=\\\"showOperations()\\\">\\n      <thead>\\n        <tr class=\\\"table-header\\\">\\n          <th scope=\\\"col\\\">Тип операции</th>\\n          <th scope=\\\"col\\\">Дата операции</th>\\n          <th scope=\\\"col\\\">Дата производства</th>\\n          <th scope=\\\"col\\\">Количество</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let operation of rollOperations\\\">\\n          <td>{{ getOperationType(operation.operationType) }}</td>\\n          <td>{{ operation.operationDate }}</td>\\n          <td>{{ operation.manufacturedDate }}</td>\\n          <td>{{ operation.rollAmount }}</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n<div *ngIf=\\\"!showOperations()\\\">\\n  <hr>\\n  <h2 class=\\\"d-flex justify-content-center\\\">\\n    За данный период нет операций\\n  </h2>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.html\n// module id = ./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.html\n// module chunks = rolls.module","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  Params,\n  Router\n} from '@angular/router';\nimport {\n  FormGroup,\n  FormControl,\n  Validators\n} from '@angular/forms';\nimport {\n  IModalDialogOptions,\n  ModalDialogService\n} from 'ngx-modal-dialog';\n\nimport {\n  RollsService\n} from '../../services/rolls.service';\nimport {\n  RollOperationType\n} from '../../enums/roll-operation-type.enum';\nimport {\n  HttpErrorModalComponent\n} from '../../../app-shared/components/http-error-modal/http-error-modal.component';\nimport {\n  AppModalService\n} from '../../../app-shared/services/app-modal.service';\nimport {\n  formatDateServerToBrowser,\n  formatDateBrowserToServer\n} from '../../../../app-utils/app-date-utils';\nimport { compareDates } from '../../../../app-utils/app-comparators';\n\n@Component({\n  selector: 'app-roll-operations-page',\n  templateUrl: './roll-operations-page.component.html',\n  styleUrls: ['./roll-operations-page.component.css']\n})\nexport class RollOperationsPageComponent implements OnInit {\n  rollOperations: RollOperation[];\n\n  rollTypeId: number;\n  fromDateValue: string;\n  toDateValue: string;\n\n  queryParams;\n\n  form: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private rollsService: RollsService,\n    private ngxModalService: ModalDialogService,\n    private viewRef: ViewContainerRef,\n    private appModalService: AppModalService) {\n    this.queryParams = Object.assign({}, this.route.snapshot.queryParams);\n    this.rollTypeId = this.queryParams['roll_type_id'];\n  }\n\n  ngOnInit() {\n    this.fetchData();\n    this.form = new FormGroup({\n      fromDate: new FormControl(formatDateServerToBrowser(this.fromDateValue), [Validators.required, this.fromDateSmallerValidator.bind(this)]),\n      toDate: new FormControl(formatDateServerToBrowser(this.toDateValue), [Validators.required, this.toDateBiggerValidator.bind(this)])\n    });\n  }\n  private fetchData() {\n    this.fromDateValue = this.queryParams['from'];\n    this.toDateValue = this.queryParams['to'];\n    this.rollsService.getRollOperations(this.rollTypeId, this.fromDateValue, this.toDateValue)\n      .subscribe((data: RollOperation[]) => {\n        this.rollOperations = data.sort((a, b) => {\n          return compareDates(a.manufacturedDate, b.manufacturedDate);\n        });\n      }, error => {\n        this.rollOperations = undefined;\n        this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error);\n      });\n  }\n\n  getOperationType(operationType: RollOperationType) {\n    return operationType == RollOperationType.USE ? 'Списание' : 'Производство';\n  }\n\n  showOperations(): boolean {\n    if (!this.rollOperations) return true;\n    return this.rollOperations.length != 0;\n  }\n\n  onSubmit() {\n    console.log(this.form);\n    this.queryParams['from'] = formatDateBrowserToServer(this.form.value.fromDate);\n    this.queryParams['to'] = formatDateBrowserToServer(this.form.value.toDate);\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      replaceUrl: true\n    });\n    this.fetchData()\n  }\n\n  fromDateSmallerValidator(control: FormControl) {\n    if (control.value && this.form) {\n      if(compareDates(control.value, this.form.get('toDate').value, 'YYYY-MM-DD') > 0) {\n        return {\n          'biggerThenToDate': true\n        };\n      }\n    }\n    return null;\n  }\n  toDateBiggerValidator(control: FormControl) {\n    if (control.value && this.form) {\n      if(compareDates(control.value, this.form.get('fromDate').value, 'YYYY-MM-DD') < 0) {\n        return {\n          'smallerThenFromDate': true\n        };\n      }\n    }\n    return null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/components/roll-operations-page/roll-operations-page.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.css\n// module id = ./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.css\n// module chunks = rolls.module","module.exports = \"<form [formGroup]=\\\"form\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-6\\\">\\n      <label for=\\\"roll-name\\\" class=\\\"col-form-label\\\">Примечание:</label>\\n      <input type=\\\"text\\\" [maxlength]=\\\"MAX_NOTE_LENGTH\\\" class=\\\"form-control\\\" id=\\\"roll-name\\\" formControlName=\\\"note\\\" [ngClass]=\\\"{\\n          'is-invalid': form.get('note').invalid && isTouched('note'),\\n          'is-valid': form.get('note').valid && isTouched('note')\\n        }\\\">\\n      <div class=\\\"invalid-feedback\\\">\\n        Максимальная длина {{ MAX_NOTE_LENGTH }}\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-4\\\">\\n      <label for=\\\"roll-thickness\\\" class=\\\"col-form-label\\\">Толщина:</label>\\n      <input type=\\\"number\\\" step=\\\"0.1\\\" class=\\\"form-control\\\" id=\\\"roll-thickness\\\" formControlName=\\\"thickness\\\" [ngClass]=\\\"{\\n          'is-invalid': form.get('thickness').invalid && isTouched('thickness'),\\n          'is-valid': form.get('thickness').valid && isTouched('thickness')\\n        }\\\">\\n      <div class=\\\"invalid-feedback\\\">\\n        Толщина должна быть больше {{ MIN_THICKNESS }}\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-2\\\">\\n      <label for=\\\"roll-color\\\" class=\\\"col-form-label\\\">Цвет:</label>\\n      <input type=\\\"button\\\" class=\\\"form-control\\\" id=\\\"roll-color\\\" formControlName=\\\"colorCode\\\" [(colorPicker)]=\\\"colorCode\\\" [value]=\\\"colorCode\\\"\\n        [style.background]=\\\"colorCode\\\" [style.color]=\\\"colorCode\\\" [cpOutputFormat]=\\\"'hex'\\\" [cpPosition]=\\\"'left'\\\" [cpOKButton]=\\\"true\\\"\\n        [cpCancelButton]=\\\"true\\\" [cpPresetColors]=\\\"presetColors\\\">\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <label for=\\\"roll-min-weight\\\" class=\\\"col-form-label\\\">Вес:</label>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-6\\\">\\n      <div class=\\\"input-group\\\">\\n        <div class=\\\"input-group-prepend\\\">\\n          <span class=\\\"input-group-text\\\">от:</span>\\n        </div>\\n        <input (input)=\\\"revalidateMaxWeight()\\\" type=\\\"number\\\" step=\\\"1\\\" class=\\\"form-control\\\" id=\\\"roll-min-weight\\\" formControlName=\\\"minWeight\\\"\\n          [ngClass]=\\\"{\\n        'is-invalid': form.get('minWeight').invalid && isTouched('minWeight'),\\n        'is-valid': form.get('minWeight').valid && isTouched('minWeight')\\n        }\\\">\\n        <div class=\\\"invalid-feedback\\\" *ngIf=\\\"form.get('minWeight').invalid && isTouched('minWeight')\\\">\\n          <span *ngIf=\\\"form.get('minWeight').errors['min']\\\">Вес должен быть больше {{ MIN_WEIGHT }}</span>\\n          <span *ngIf=\\\"form.get('minWeight').errors['required']\\\">Вес не может быть пустым!</span>\\n          <span *ngIf=\\\"form.get('minWeight').errors['greaterThenMax']\\\">Минимальное значение должно быть меньше максимального!</span>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n      <div class=\\\"input-group\\\">\\n        <div class=\\\"input-group-prepend\\\">\\n          <span class=\\\"input-group-text\\\">до:</span>\\n        </div>\\n        <input (input)=\\\"revalidateMinWeight()\\\" type=\\\"number\\\" step=\\\"1\\\" class=\\\"form-control\\\" id=\\\"roll-max-weight\\\" formControlName=\\\"maxWeight\\\"\\n          [ngClass]=\\\"{\\n        'is-invalid': form.get('maxWeight').invalid && isTouched('maxWeight'),\\n        'is-valid': form.get('maxWeight').valid && isTouched('maxWeight')\\n        }\\\">\\n        <div class=\\\"invalid-feedback\\\" *ngIf=\\\"form.get('maxWeight').invalid && isTouched('maxWeight')\\\">\\n          <span *ngIf=\\\"form.get('maxWeight').errors['min']\\\">Вес должен быть больше {{ MIN_WEIGHT }}</span>\\n          <span *ngIf=\\\"form.get('maxWeight').errors['required']\\\">Вес не может быть пустым!</span>\\n          <span *ngIf=\\\"form.get('maxWeight').errors['smallerThenMin']\\\">Максимальное значение должно быть больше минимального!</span>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.html\n// module id = ./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.html\n// module chunks = rolls.module","import {\n  Component,\n  OnInit,\n  Input,\n  ComponentRef,\n  ViewChild\n} from '@angular/core';\nimport {\n  NgbActiveModal\n} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  FormGroup,\n  FormControl,\n  Validators\n} from '@angular/forms';\nimport {\n  IModalDialog,\n  IModalDialogOptions,\n  IModalDialogButton\n} from 'ngx-modal-dialog';\nimport {\n  from\n} from 'rxjs/observable/from';\nimport appPresetColors from '../../../../app-utils/app-preset-colors';\n\n@Component({\n  selector: 'app-roll-type-modal',\n  templateUrl: './roll-type-modal.component.html',\n  styleUrls: ['./roll-type-modal.component.css']\n})\nexport class RollTypeModalComponent implements OnInit, IModalDialog {\n\n  actionButtons: IModalDialogButton[];\n  options: Partial < IModalDialogOptions < RollTypeModalData >> ;\n\n  form: FormGroup;\n  presetColors = appPresetColors;\n\n  readonly MIN_WEIGHT = 0.1;\n  readonly MIN_THICKNESS = 0.1;\n  rollType: RollType;\n  colorCode;\n  readonly MAX_NOTE_LENGTH = 20;\n\n  submitPressed = false;\n\n  private btnClass = 'btn btn-outline-dark';\n\n  constructor() {\n    this.actionButtons = [{\n        text: 'Отмена',\n        buttonClass: this.btnClass,\n        onAction: () => true\n      },\n      {\n        text: 'Сохранить',\n        buttonClass: this.btnClass,\n        onAction: this.onSubmit.bind(this)\n      }\n    ];\n  }\n\n  ngOnInit() {\n    this.colorCode = this.rollType ? this.rollType.colorCode : appPresetColors[0];\n\n    this.form = new FormGroup({\n      note: new FormControl(this.rollType ? this.rollType.note : '', Validators.maxLength(this.MAX_NOTE_LENGTH)),\n      colorCode: new FormControl(this.colorCode),\n      thickness: new FormControl(this.rollType ? this.rollType.thickness : undefined, [Validators.required, Validators.min(this.MIN_THICKNESS)]),\n      minWeight: new FormControl(this.rollType ? this.rollType.minWeight : undefined, [Validators.required, Validators.min(this.MIN_WEIGHT), this.validateMinWeight.bind(this)]),\n      maxWeight: new FormControl(this.rollType ? this.rollType.maxWeight : undefined, [Validators.required, Validators.min(this.MIN_WEIGHT), this.validateMaxWeight.bind(this)])\n    });\n  }\n\n  dialogInit(reference: ComponentRef < IModalDialog > , options: Partial < IModalDialogOptions < RollTypeModalData >> ) {\n    this.options = options;\n    this.rollType = options.data.rollType;\n  };\n\n  onSubmit(): Promise < RollType > {\n    if (this.form.invalid) {\n      this.submitPressed = true;\n      const reject = Promise.reject('invalid');\n      this.options.data.operation(reject);\n      return reject;\n    }\n\n    const type: RollType = {\n      id: undefined,\n      note: this.form.value.note,\n      colorCode: this.colorCode,\n      thickness: this.form.value.thickness,\n      minWeight: this.form.value.minWeight,\n      maxWeight: this.form.value.maxWeight\n    }\n    const resolve = Promise.resolve(type);\n    this.options.data.operation(resolve);\n    return resolve;\n  }\n\n  validateMinWeight(control: FormControl) {\n    if (control.value && this.form) {\n      if (control.value > this.form.get('maxWeight').value) {\n        return {\n          'greaterThenMax': true\n        };\n      }\n    }\n    return null;\n  }\n\n  validateMaxWeight(control: FormControl) {\n    if (control.value && this.form) {\n      if (control.value < this.form.get('minWeight').value) {\n        return {\n          'smallerThenMin': true\n        };\n      }\n    }\n    return null;\n  }\n\n  revalidateMinWeight() {\n    this.form.get('minWeight').updateValueAndValidity();\n  }\n\n  revalidateMaxWeight() {\n    this.form.get('maxWeight').updateValueAndValidity();\n  }\n\n  isTouched(controlName: string) {\n    return this.form.get(controlName).touched || this.submitPressed;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/components/roll-type-modal/roll-type-modal.component.ts","module.exports = \".container-fluid {\\n  margin-top: 0.5rem;\\n}\\n\\nbutton {\\n  margin-bottom: 0.5rem;\\n}\\n\\n.roll-ready {\\n    color: #3c39cc;\\n}\\n\\n.roll-not-ready {\\n  color: #6d6d6d;\\n}\\n\\nth, td {\\n  white-space: nowrap;\\n}\\n\\napp-roll-check {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-pack: center;\\n      -ms-flex-pack: center;\\n          justify-content: center;\\n}\\n\\ntable {\\n  margin-bottom: 10%;\\n}\\n\\n::ng-deep .dropdown-item {\\n  font-size: 0.9rem;\\n  padding: .1rem 1rem;\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.css\n// module id = ./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.css\n// module chunks = rolls.module","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <button class=\\\"btn btn-outline-dark btn-sm\\\" (click)=\\\"openAddRollTypeModal()\\\">\\n    <span class=\\\"material-icons\\\">add</span>\\n  </button>\\n  <button type=\\\"button\\\" class=\\\"btn btn-outline-dark btn-sm\\\" (click)=\\\"showPreviousPeriod()\\\">\\n    <span class=\\\"material-icons\\\">arrow_back</span>\\n    Предыдущий период\\n  </button>\\n  <button *ngIf=\\\"isBeforePreviousPeriod()\\\" class=\\\"btn btn-outline-dark btn-sm\\\" (click)=\\\"showNextPeriod()\\\">\\n    Следующий период\\n    <span class=\\\"material-icons\\\">arrow_forward</span>\\n  </button>\\n  <button *ngIf=\\\"isPreviousPeriod()\\\" class=\\\"btn btn-outline-dark btn-sm\\\" (click)=\\\"showCurrentPeriod()\\\">\\n    Текущий период\\n    <span class=\\\"material-icons\\\">timelapse</span>\\n  </button>\\n  <div class=\\\"table-responsive rolls-table\\\">\\n    <table class=\\\"table table-bordered table-striped table-sm\\\">\\n      <thead>\\n        <tr class=\\\"table-header\\\">\\n          <th scope=\\\"col\\\" colspan=\\\"4\\\"></th>\\n          <th *ngFor=\\\"let monthYear of dateHeader\\\" scope=\\\"col\\\" [colSpan]=\\\"monthYearMap.get(monthYear) + 2/dateHeader.length\\\">\\n            <small>{{ monthYear }}</small>\\n          </th>\\n          <th scope=\\\"col\\\" *ngIf=\\\"!isPreviousPeriod()\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-outline-dark btn-sm p-0 pl-2 pr-2 m-0\\\" (click)=\\\"submitRollChecks()\\\">\\n              <span class=\\\"material-icons\\\">save</span>\\n            </button>\\n          </th>\\n        </tr>\\n        <tr class=\\\"table-header\\\">\\n          <th scope=\\\"col\\\" class=\\\"row-name\\\">Примечание</th>\\n          <th scope=\\\"col\\\">Толщина</th>\\n          <th scope=\\\"col\\\">Вес</th>\\n          <th scope=\\\"col\\\">Цвет</th>\\n          <th scope=\\\"col\\\">Остаток</th>\\n          <th scope=\\\"col\\\" *ngFor=\\\"let day of daysHeader\\\">\\n            {{ day.getDate() }}\\n          </th>\\n          <th scope=\\\"col\\\">Всего</th>\\n          <th scope=\\\"col\\\" *ngIf=\\\"!isPreviousPeriod()\\\">Проверка</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"\\n        let rollInfo of sortByColorThicknessRollId(rollsInfo)\\\" [contextMenu]=\\\"rollsMenu\\\" [contextMenuSubject]=\\\"rollInfo.rollType\\\">\\n          <th scope=\\\"row\\\" class=\\\"row-name\\\">\\n            {{ rollInfo.rollType.note }}\\n          </th>\\n          <th scope=\\\"row\\\" class=\\\"row-name\\\">\\n            {{ rollInfo.rollType.thickness }}\\n          </th>\\n          <th scope=\\\"row\\\" class=\\\"row-name\\\">\\n            {{ getWeight(rollInfo.rollType) }}\\n          </th>\\n          <th scope=\\\"row\\\" class=\\\"row-name\\\">\\n            <span class=\\\"filled-circle\\\" [ngStyle]=\\\"{ 'background-color': rollInfo.rollType.colorCode}\\\"></span>\\n          </th>\\n          <td>\\n            {{ rollInfo.restRollLeftover.amount }}\\n          </td>\\n          <td *ngFor=\\\"let batch of getBatches(rollInfo.rollBatches); index as i\\\" (click)=\\\"openCreateRollOperationModal(batch, i, rollInfo.rollType.id)\\\">\\n            <div [ngClass]=\\\"{\\n              'roll-ready': isReady(batch),\\n              'roll-not-ready': !isReady(batch)\\n            }\\\">\\n              {{ getBatch(batch) }}\\n            </div>\\n          </td>\\n          <td>\\n            {{ rollInfo.totalRollLeftover.amount }}\\n          </td>\\n          <td *ngIf=\\\"!isPreviousPeriod()\\\">\\n            <app-roll-check [rollCheck]=\\\"rollInfo.rollCheck\\\" (changeCheckStatus)=\\\"onChangeRollCheck($event)\\\"></app-roll-check>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\\n<context-menu #rollsMenu>\\n  <ng-template contextMenuItem let-item (execute)=\\\"openRollOperationsPage($event.item)\\\">\\n    Список операций\\n  </ng-template>\\n  <ng-template contextMenuItem divider=\\\"true\\\"></ng-template>\\n  <ng-template contextMenuItem (execute)=\\\"openEditRollTypeModal($event.item)\\\">\\n    Редактировать рулон\\n  </ng-template>\\n  <ng-template contextMenuItem divider=\\\"true\\\"></ng-template>\\n  <ng-template contextMenuItem let-item (execute)=\\\"openDeleteRollTypeModal($event.item)\\\">\\n    Удалить рулон\\n  </ng-template>\\n</context-menu>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.html\n// module id = ./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.html\n// module chunks = rolls.module","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  Router,\n  ActivatedRoute\n} from '@angular/router';\nimport {\n  NgbModal\n} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  ContextMenuComponent\n} from 'ngx-contextmenu';\nimport {\n  ModalDialogService,\n  IModalDialogOptions\n} from 'ngx-modal-dialog';\nimport * as moment from 'moment';\n\nimport {\n  substructDays,\n  midnightDate,\n  addDays,\n  formatDate,\n  getIndex,\n  getDifferenceInDays,\n  getDate\n} from '../../../../app-utils/app-date-utils';\nimport {\n  RollsService\n} from '../../services/rolls.service';\nimport {\n  compareColors\n} from '../../../../app-utils/app-comparators';\nimport {\n  RollTypeModalComponent\n} from '../roll-type-modal/roll-type-modal.component';\nimport {\n  RollOperationModalComponent\n} from '../roll-operation-modal/roll-operation-modal.component';\nimport {\n  HttpErrorModalComponent\n} from '../../../app-shared/components/http-error-modal/http-error-modal.component';\nimport {\n  CheckStatus\n} from '../../enums/check-status.enum';\nimport {\n  AppModalService\n} from '../../../app-shared/services/app-modal.service';\nimport {\n  SimpleConfirmModalComponent\n} from '../../../app-shared/components/simple-confirm-modal/simple-confirm-modal.component';\n\n\n@Component({\n  selector: 'app-rolls-page',\n  templateUrl: './rolls-page.component.html',\n  styleUrls: ['./rolls-page.component.css']\n})\nexport class RollsPageComponent implements OnInit {\n  daysHeader: Date[];\n  dateHeader: string[];\n  monthYearMap: Map < string,\n  number > ;\n  rollsInfo: RollInfo[] = [];\n  daysInTable = 30;\n  restDate: Date;\n  fromDate: Date;\n  toDate = midnightDate();\n  rollChecks = new Map < number,\n  RollCheck > ();\n\n  @ViewChild(ContextMenuComponent) public rollsMenu: ContextMenuComponent;\n\n  constructor(\n    private rollsService: RollsService,\n    private ngxModalService: ModalDialogService,\n    private viewRef: ViewContainerRef,\n    private router: Router,\n    private route: ActivatedRoute,\n    private appModalService: AppModalService) {}\n\n  ngOnInit() {\n    this.showCurrentPeriod();\n  }\n\n  private initTableHeader(dateTo: Date) {\n    this.toDate = dateTo;\n    this.restDate = substructDays(dateTo, this.daysInTable);\n    this.fromDate = substructDays(dateTo, this.daysInTable - 1);\n    this.daysHeader = [];\n    this.monthYearMap = new Map();\n    for (let i = 0; i < this.daysInTable; i++) {\n      const substructedDate = addDays(this.fromDate, i);\n      this.daysHeader.push(substructedDate);\n      const monthYear: string = moment(substructedDate).locale('ru').format('MMM YY');\n      this.monthYearMap.set(monthYear, this.monthYearMap.has(monthYear) ? this.monthYearMap.get(monthYear) + 1 : 1);\n    }\n    this.dateHeader = Array.from(this.monthYearMap.keys());\n  }\n\n  private fetchTableData() {\n    if (this.isPreviousPeriod()) {\n      this.rollsService.getRollsInfoWithoutCheck(this.restDate, this.fromDate, this.toDate)\n        .subscribe(data => {\n          this.rollsInfo = data;\n        }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error));\n    } else {\n      this.rollsService.getRollsInfo(this.restDate, this.fromDate, this.toDate)\n        .subscribe(data => {\n          this.rollsInfo = data;\n        }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error));\n    }\n  }\n\n\n  showPreviousPeriod() {\n    this.initTableHeader(substructDays(this.toDate, this.daysInTable));\n    this.fetchTableData();\n  }\n\n  showNextPeriod() {\n    this.initTableHeader(addDays(this.toDate, this.daysInTable));\n    this.fetchTableData();\n  }\n\n  isPreviousPeriod() {\n    const accuracy = 10000;\n    return this.toDate.getTime() + accuracy < midnightDate().getTime();\n  }\n\n  isBeforePreviousPeriod() {\n    const accuracy = 10000;\n    return this.toDate.getTime() + accuracy < substructDays(midnightDate(), this.daysInTable).getTime();\n  }\n\n  showCurrentPeriod() {\n    this.initTableHeader(midnightDate());\n    this.fetchTableData();\n  }\n\n  getBatch(rollBatch: RollBatch): number | string {\n    if (rollBatch) return rollBatch.leftOverAmount;\n    else return '';\n  }\n\n  getBatches(rollBatches: RollBatch[]) {\n    const result = new Array(this.daysInTable);\n    rollBatches.forEach(item => result[getIndex(midnightDate(item.dateManufactured), result.length, (24 * 60 * 60 * 1000), this.toDate)] = item);\n    return result;\n  }\n\n  getWeight(rollType: RollType): string | number {\n    return rollType.minWeight == rollType.maxWeight ? rollType.minWeight : `${rollType.minWeight}–${rollType.maxWeight}`;\n  }\n\n  sortByColorThicknessRollId(rollsInfo: RollInfo[]): RollInfo[] {\n    return rollsInfo.sort((a, b) => {\n      const colorSortValue = compareColors(a.rollType.colorCode, b.rollType.colorCode);\n      const thicknessSort = a.rollType.thickness - b.rollType.thickness;\n      return colorSortValue != 0 ? colorSortValue :\n        thicknessSort != 0 ? thicknessSort : a.rollType.id - b.rollType.id;\n    });\n  }\n\n  openAddRollTypeModal() {\n    const operation = (result: Promise < RollType > ) => {\n      result\n        .then((resolve: RollType) => {\n          this.rollsService.postRollType(resolve, this.daysInTable, this.restDate, this.toDate)\n            .subscribe(rollInfo => {\n              this.rollsInfo.push(rollInfo);\n            }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error));\n        }, reject => {});\n    };\n    const modalOptions: Partial < IModalDialogOptions < RollTypeModalData >> = {\n      title: 'Новый рулон',\n      childComponent: RollTypeModalComponent,\n      data: {\n        operation: operation.bind(this)\n      }\n    };\n    this.ngxModalService.openDialog(this.viewRef, modalOptions);\n  }\n\n  openEditRollTypeModal(rollType: RollType) {\n    const operation = (result: Promise < RollType > ) => {\n      result\n        .then((resolve: RollType) => {\n          resolve.id = rollType.id;\n          this.rollsService.putRollType(resolve)\n            .subscribe(x => {\n              rollType.id = x.id;\n              rollType.note = x.note;\n              rollType.colorCode = x.colorCode;\n              rollType.thickness = x.thickness;\n              rollType.minWeight = x.minWeight;\n              rollType.maxWeight = x.maxWeight;\n            }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error))\n        }, reject => {});\n    };\n    const modalOptions: Partial < IModalDialogOptions < RollTypeModalData >> = {\n      title: 'Редактирование рулона',\n      childComponent: RollTypeModalComponent,\n      data: {\n        rollType: rollType,\n        operation: operation.bind(this)\n      }\n    };\n    this.ngxModalService.openDialog(this.viewRef, modalOptions);\n  }\n\n  openCreateRollOperationModal(batch: RollBatch, index: number, rollTypeId: number) {\n    const operation = (result: Promise < RollOperation > ) => {\n      result\n        .then((resolve: RollOperation) => {\n          this.rollsService.postRollOperation(resolve).subscribe(data => {\n            this.fetchTableData();\n          }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error));\n        }, reject => {});\n    }\n\n    const modalOptions: Partial < IModalDialogOptions < RollOperationModalData >> = {\n      title: 'Операция над рулонами',\n      childComponent: RollOperationModalComponent,\n      data: {\n        batch,\n        rollTypeId,\n        manufacturedDate: this.daysHeader[index],\n        operation: operation.bind(this)\n      }\n    };\n    this.ngxModalService.openDialog(this.viewRef, modalOptions);\n  }\n\n  isReady(batch: RollBatch) {\n    if (!batch) return false;\n    return batch.readyToUse;\n  }\n\n  onChangeRollCheck(rollCheck: RollCheck) {\n    this.rollChecks.set(rollCheck.id, rollCheck);\n  }\n\n  submitRollChecks() {\n    this.rollsService.putRollChecks(Array.from(this.rollChecks.values()))\n      .subscribe(data => {\n        if (data.length != 0) {\n          this.fetchTableData();\n          this.rollChecks.clear();\n        }\n      }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error));\n  }\n\n  openRollOperationsPage(item: RollType) {\n    this.router.navigate(['operations'], {\n      relativeTo: this.route,\n      queryParams: {\n        'roll_type_id': item.id,\n        'from': formatDate(this.fromDate),\n        'to': formatDate(this.toDate)\n      }\n    });\n  }\n\n  openDeleteRollTypeModal(item: RollType) {\n    const buttonClass = 'btn btn-outline-dark';\n    const modalOptions: Partial < IModalDialogOptions < any >> = {\n      title: 'Подтвердите удаление рулона',\n      childComponent: SimpleConfirmModalComponent,\n      actionButtons: [{\n          text: 'Отменить',\n          buttonClass,\n          onAction: () => true\n        },\n        {\n          text: 'Удалить',\n          buttonClass,\n          onAction: () => {\n            this.rollsService.deleteRollType(item.id)\n              .subscribe(data => {\n                this.rollsInfo = this.rollsInfo.filter((value, index, array) => value.rollType.id != item.id);\n              }, error => this.appModalService.openHttpErrorModal(this.ngxModalService, this.viewRef, error));\n            return true;\n          }\n        }\n      ]\n    };\n    this.ngxModalService.openDialog(this.viewRef, modalOptions);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/components/rolls-page/rolls-page.component.ts","export enum CheckStatus {\n    NOT_CHECKED = 'NOT_CHECKED',\n    CONFIRMED = 'CONFIRMED',\n    NOT_CONFIRMED = 'NOT_CONFIRMED'\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/enums/check-status.enum.ts","export enum RollOperationType {\n    MANUFACTURE = 'MANUFACTURE',\n    USE = 'USE'\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/enums/roll-operation-type.enum.ts","import {\n  NgModule\n} from '@angular/core';\nimport {\n  Routes,\n  RouterModule\n} from '@angular/router';\nimport {\n  RollsPageComponent\n} from './components/rolls-page/rolls-page.component';\nimport {\n  RollOperationsPageComponent\n} from './components/roll-operations-page/roll-operations-page.component'\n\nconst rollsRoutes: Routes = [{\n    path: '',\n    component: RollsPageComponent\n  },\n  {\n    path: 'operations',\n    component: RollOperationsPageComponent\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(rollsRoutes)],\n  exports: [RouterModule]\n})\nexport class RollsRouting {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/rolls-routing.module.ts","import {\n  NgModule\n} from \"@angular/core\";\nimport {\n  CommonModule\n} from \"@angular/common\";\nimport {\n  ReactiveFormsModule,\n  FormsModule\n} from \"@angular/forms\";\nimport {\n  ColorPickerModule\n} from 'ngx-color-picker';\nimport {\n  NgbModule\n} from \"@ng-bootstrap/ng-bootstrap\";\nimport {\n  NgSelectModule\n} from \"@ng-select/ng-select\";\nimport {\n  ContextMenuModule\n} from \"ngx-contextmenu\";\nimport {\n  ModalDialogModule\n} from \"ngx-modal-dialog\";\n\nimport {\n  RollsPageComponent\n} from \"./components/rolls-page/rolls-page.component\";\nimport {\n  RollTypeModalComponent\n} from \"./components/roll-type-modal/roll-type-modal.component\";\nimport {\n  RollOperationModalComponent\n} from \"./components/roll-operation-modal/roll-operation-modal.component\";\nimport {\n  RollsRouting\n} from \"./rolls-routing.module\";\nimport {\n  RollsService\n} from \"./services/rolls.service\";\nimport {\n  RollsUrlService\n} from \"./services/rolls-url.service\";\nimport {\n  RollCheckComponent\n} from './components/roll-check/roll-check.component';\nimport {\n  AppSharedModule\n} from \"../app-shared/app-shared.module\";\nimport {\n  RollOperationsPageComponent\n} from './components/roll-operations-page/roll-operations-page.component';\n\n@NgModule({\n  declarations: [\n    RollsPageComponent,\n    RollTypeModalComponent,\n    RollOperationModalComponent,\n    RollCheckComponent,\n    RollOperationsPageComponent\n  ],\n  imports: [\n    CommonModule,\n    NgbModule.forRoot(),\n    RollsRouting,\n    ColorPickerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    ContextMenuModule.forRoot({\n      useBootstrap4: true\n    }),\n    ModalDialogModule.forRoot(),\n    AppSharedModule\n  ],\n  entryComponents: [\n    RollTypeModalComponent,\n    RollOperationModalComponent\n  ],\n  providers: [\n    RollsService,\n    RollsUrlService\n  ]\n})\n\nexport class RollsModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/rolls.module.ts","import {\n  Injectable\n} from '@angular/core';\nimport {\n  RestDetailsService\n} from '../../../services/rest-details-service';\n\n@Injectable()\nexport class RollsUrlService {\n  private host = this.restDetails.host;\n\n  rollTypesUrl = `${this.host}/roll-types`;\n  rollBatchUrl = `${this.host}/roll-batches`;\n  rollLeftoverUrl = `${this.host}/roll-leftovers`;\n  rollOperationUrl = `${this.host}/roll-operations`;\n  rollChecksUrl = `${this.host}/roll-checks`;\n\n  constructor(private restDetails: RestDetailsService) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/services/rolls-url.service.ts","import {\n  Injectable\n} from '@angular/core';\nimport {\n  RollsUrlService\n} from './rolls-url.service';\nimport {\n  HttpClient,\n  HttpParams,\n  HttpHeaders\n} from '@angular/common/http';\nimport {\n  flatMap\n} from 'rxjs/operators';\nimport {\n  from\n} from 'rxjs/observable/from';\nimport { of\n} from 'rxjs/observable/of';\nimport {\n  Observable\n} from 'rxjs/Observable';\nimport {\n  formatDate\n} from '../../../app-utils/app-date-utils';\nimport {\n  httpErrorHandle\n} from '../../../app-utils/app-http-error-handler';\nimport {\n  CheckStatus\n} from '../enums/check-status.enum';\n\n@Injectable()\nexport class RollsService {\n\n  headers = new HttpHeaders();\n\n  constructor(private urls: RollsUrlService, private http: HttpClient) {}\n\n  postRollOperation(rollOperation: RollOperation) {\n    return this.http.post(this.urls.rollOperationUrl, rollOperation).catch(httpErrorHandle);\n  }\n\n  putRollType(rollType: RollType): Observable < RollType > {\n    const requestUrl = `${this.urls.rollTypesUrl}/${String(rollType.id)}`;\n    const dto: RollTypeDTO = {\n      note: rollType.note,\n      colorCode: rollType.colorCode,\n      thickness: rollType.thickness,\n      minWeight: rollType.minWeight,\n      maxWeight: rollType.maxWeight\n    }\n    return <Observable < RollType >> this.http.put(requestUrl, dto).catch(httpErrorHandle);\n  }\n\n  getRollsInfo(restDate: Date, fromDate: Date, totalDate: Date): Observable < RollInfo[] > {\n    return this.http.get(this.urls.rollTypesUrl, {\n      headers: this.headers\n    }).flatMap(\n      (data: RollType[]) => from(data)\n      .flatMap((type: RollType) => this.getRollBatchesByDateRange(type.id, fromDate, totalDate)\n        .flatMap((batches: RollBatch[]) => this.getRollLeftoverByRollIdAndDate(type.id, restDate)\n          .flatMap((restOver: RollLeftover) => this.getRollLeftoverByRollIdAndDate(type.id, totalDate)\n            .flatMap((totalOver: RollLeftover) => this.getRollCheck(type.id)\n              .flatMap((rollCheck: RollCheck) => {\n                const rollInfo: RollInfo = {\n                  rollType: type,\n                  rollBatches: batches,\n                  restRollLeftover: restOver,\n                  totalRollLeftover: totalOver,\n                  rollCheck\n                };\n                return of(rollInfo);\n              })\n            )\n          )\n        )\n      )\n    ).toArray().catch(httpErrorHandle);\n  }\n\n  getRollsInfoWithoutCheck(restDate: Date, fromDate: Date, totalDate: Date): Observable < RollInfo[] > {\n    return this.http.get(this.urls.rollTypesUrl, {\n      headers: this.headers\n    }).flatMap(\n      (data: RollType[]) => from(data)\n      .flatMap((type: RollType) => this.getRollBatchesByDateRange(type.id, fromDate, totalDate)\n        .flatMap((batches: RollBatch[]) => this.getRollLeftoverByRollIdAndDate(type.id, restDate)\n          .flatMap((restOver: RollLeftover) => this.getRollLeftoverByRollIdAndDate(type.id, totalDate)\n            .flatMap((totalOver: RollLeftover) => of ( < RollCheck > {\n                id: undefined,\n                rollTypeId: undefined,\n                rollLeftOverCheckStatus: CheckStatus.NOT_CHECKED\n              })\n              .flatMap((rollCheck: RollCheck) => {\n                const rollInfo: RollInfo = {\n                  rollType: type,\n                  rollBatches: batches,\n                  restRollLeftover: restOver,\n                  totalRollLeftover: totalOver,\n                  rollCheck\n                };\n                return of(rollInfo);\n              })\n            )\n          )\n        )\n      )\n    ).toArray().catch(httpErrorHandle);\n  }\n\n  postRollType(rollType: RollTypeDTO, daysInTable: number, restDate: Date, toDate: Date): Observable < RollInfo > {\n    return this.http.post(this.urls.rollTypesUrl, rollType, {\n      headers: this.headers\n    }).map((createdRollType: RollType) => {\n      const info: RollInfo = {\n        rollType: createdRollType,\n        rollBatches: new Array(daysInTable),\n        restRollLeftover: {\n          date: formatDate(restDate),\n          rollTypeId: createdRollType.id,\n          amount: 0\n        },\n        totalRollLeftover: {\n          date: formatDate(toDate),\n          rollTypeId: createdRollType.id,\n          amount: 0\n        },\n        rollCheck: {\n          id: createdRollType.id,\n          rollTypeId: createdRollType.id,\n          rollLeftOverCheckStatus: CheckStatus.NOT_CHECKED\n        }\n      };\n      return info\n    }).catch(httpErrorHandle);\n  }\n\n  getRollBatchesByDateRange(rollTypeId: number, from: Date, to: Date) {\n    const params = new HttpParams({\n      fromObject: {\n        roll_type_id: String(rollTypeId),\n        from: formatDate(from),\n        to: formatDate(to)\n      }\n    });\n    return this.http.get(this.urls.rollBatchUrl, {\n      params,\n      headers: this.headers\n    }).catch(httpErrorHandle);\n  }\n\n  getRollCheck(rollTypeId: number) {\n    const params = new HttpParams()\n      .append('roll_type_id', String(rollTypeId));\n    return this.http.get(this.urls.rollChecksUrl, {\n      params,\n      headers: this.headers\n    }).catch(httpErrorHandle);\n  }\n\n  getRollLeftoverByRollIdAndDate(rollTypeId: number, date: Date) {\n    const params = new HttpParams({\n      fromObject: {\n        roll_type_id: String(rollTypeId),\n        date: formatDate(date)\n      }\n    });\n    return this.http.get(this.urls.rollLeftoverUrl, {\n      params,\n      headers: this.headers\n    }).catch(httpErrorHandle);\n  }\n\n  putRollChecks(rollChecks: RollCheck[]): Observable < RollCheck[] > {\n    return from(rollChecks).flatMap((value) => this.putRollChek(value)).toArray();\n  }\n\n  putRollChek(rollCheck: RollCheck): Observable < RollCheck > {\n    const url = `${this.urls.rollChecksUrl}/${rollCheck.id}`;\n    const body: RollCheckRequest = {\n      rollLeftOverCheckStatus: rollCheck.rollLeftOverCheckStatus\n    };\n    return this.http.put(url, body).catch(httpErrorHandle);\n  }\n\n  getRollOperations(rollTypeId: number, from: string, to: string) {\n    const params = new HttpParams()\n      .set('roll_type_id', String(rollTypeId))\n      .set('from_manuf', from)\n      .set('to_manuf', to);\n    return this.http.get(this.urls.rollOperationUrl, {\n      params,\n      headers: this.headers\n    }).catch(httpErrorHandle);\n  }\n\n  deleteRollType(rollTypeId: number) {\n    const url = `${this.urls.rollTypesUrl}/${rollTypeId}`;\n    return this.http.delete(url)\n      .catch(httpErrorHandle);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/app-rolls/services/rolls.service.ts"],"sourceRoot":"webpack:///"}